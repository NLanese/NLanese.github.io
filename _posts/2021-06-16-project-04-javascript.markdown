---
layout: post
title:      "Project-04-JavaScript"
date:       2021-06-16 21:04:30 +0000
permalink:  project-04-javascript
---


This project actually came much more easily to me than both the Sinatra and Rails Projects. There's a certain comfort I find in JavaScript development like this. So much is happening in the background with Rails. For me,  creating complex routes, makingdnested forms and even using Helper methods feels like I am taking a bit of a leap of faith. I need to trust the Rails framework to understand what I'm saying and do all of the web prosesses and file navigation in the background. In JavaScript, (fetching aside) everything feels like it is in my control. I tell it which files to use, I create classes or html elements, and I am the only one who tells it how and when to change. Object Oriented development coincides very well with my natural throught process and ways of approaching porblems naturally. This is why debugging this project and adding features was a relatively quick process for me. 
The most complicated part actually was the very first task-- making the board (which was an 8 x 8 block of divs). In full disclosure, if stackoverfow never existed I would still be working on this. Drawing inspiration from other developers' checkerboards helped a lot, mainly with the CSS. After this, (and circumventing CORS errors thanks to youtube) there was no process that really had me stumped for more than an hour. I credit this mainly to my ability to, if unable to solve a certain problem, just find a different way to solve said problem all together. One such example of this was in making code that would keep track of whose turn it was. Since moving a piece relied on an eventListener that was 1. mass assigned (assigned to many divs at a time via forEach loops); and 2. only triggered if a conditional was met,; there was an issue having the turn count (a general variable set to 0 at first) increase by one after every piece movement. What would happen is sometimes after 1 move, the turn = turn + 1 line would fire a random amount of times. So the turns could jumo from 4 to 18. The player whose turn it was, was dependant on turns. If turns was even, red was up, if it was odd, black. I could not solve this issue, so rather than wasting more time on this error, I actually just created another global variable. This variable was set to the piece that was just moved, and if its class name contained 'black' then it was red's turn, if its class name contained 'red', black was up. 
This style of tackling the issues that were in front of me may have just been due to my better connecting with this kind of development, or due to experience I've acquired from the first three projects. Regardless, it is something I will continue to carry on with me.
